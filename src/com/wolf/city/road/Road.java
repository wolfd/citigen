/**
 * 
 */
package com.wolf.city.road;

import com.wolf.city.Node;
import com.wolf.city.util.Vector3d;

/**
 * SmartRoad contains the data relating to the patterns of a road. Contains
 * methods for creating new roads and mixing patterns.
 * 
 * @author Daniel Wolf <wolf@ccs.neu.edu>
 * @version Jan 21, 2014
 */
public class Road {
    /**
     * Starting node
     */
    public Node a;
    /**
     * Ending node
     */
    public Node b;
    /**
     * Includes a list of patterns to use, operates a palate
     */
    private PatternLibrary patterns;
    /**
     * Filter to apply to roads generated by this road Alternatively: applied to
     * this road, and
     */
    private RoadFilter filter;
    public boolean failed;

    private Road(Node a, Node b, PatternLibrary patterns, RoadFilter filter) {
        this.a = a;
        this.b = b;
        this.patterns = patterns;
        this.filter = filter;
        this.failed = false;
    }

    public static Road create(Road parent, RoadPattern.Direction direction) {
        return parent.create(direction);
    }

    /**
     * Create the next iteration using the PatternLibrary and the RoadFilter.
     * 
     * @param direction
     * @return
     */
    private Road create(RoadPattern.Direction direction) {
        Vector3d end = patterns.generate(this, direction);
        PatternLibrary newLibrary = patterns.mutate();
        Road newRoad =
                filter.filter(new Road(this.b, new Node(end), newLibrary,
                        filter.mutate()));
        newRoad.b.addRoad(newRoad);
        return newRoad;
    }

    /**
     * Remove all references to this road from connected nodes' lists
     */
    public void remove() {
        a.getRoads().remove(this);
        b.getRoads().remove(this);
    }

    /*
     * (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object o) {
        if (o instanceof Road) {
            return (this.a.equals(((Road) o).a) && this.b.equals(((Road) o).b))
                    || (this.b.equals(((Road) o).a) && this.a
                            .equals(((Road) o).b));
        }
        else {
            return false;
        }
    }

}
